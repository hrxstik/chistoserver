generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int       @id @default(autoincrement())
  name               String
  email              String       @unique
  password           String
  // Firebase cloud messaging
  pushTokens  String  @default("[]")

  signedToday        Boolean @default(false)

  //влияет на количество заданий
  age                Int
  //определяет количество заданий на каждую комнату
  homeArea           HomeArea
  //количество уникальных комнат в доме, определяют задания в чеклистах
  rooms              Room[]
  //влияет на частоту определенных заданий
  profession         Profession
  //определяет отсечку чубрика
  timeZone           String
  //влияет на появление определенных заданий
  hasChildren        Boolean
  //влияют на количество заданий в чеклистах и определенные их профессией задания в чеклистах
  roommates          Json
  //влияют на частоту определенных заданий в чеклистах
  pets               Int

  streak             Int @default(1)

  currentChubrikLevel Int @default(1)
  chubriksGrown       Int @default(0)

  userAchievements    UserAchievement[]

  checklist          Checklist?

  verified           DateTime?
  provider           String?
  providerId         String?

  verificationCode   VerificationCode?

  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
}

model Room {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int     
  type       RoomType
  tasksStory      Int[]
}

model VerificationCode {
  id        Int       @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @unique 
  code       String
  createdAt  DateTime @default(now())

  @@unique([userId, code])
}

model Checklist {
  id            Int   @id @default(autoincrement())

  user          User? @relation(fields: [userId], references: [id])
  userId        Int?  @unique

  tasks       ChecklistTask[]
  isCompleted   Boolean @default(false)

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model ChecklistTask {
  id          Int           @id @default(autoincrement())
  checklist   Checklist     @relation(fields: [checklistId], references: [id])
  checklistId Int
  task        Task          @relation(fields: [taskId], references: [id])
  taskId      Int
  isCompleted Boolean       @default(false)

  @@unique([checklistId, taskId])
}

model UserAchievement {
  id            Int          @id @default(autoincrement())
  user          User         @relation(fields: [userId], references: [id])
  userId        Int
  achievement   Achievement  @relation(fields: [achievementId], references: [id])
  achievementId Int
  currentLevel  Int          @default(0)

  @@unique([userId, achievementId])
}

model Task {
  id            Int       @id @default(autoincrement())

  description   String
  type          TaskType
  room          RoomType

  checklistTasks ChecklistTask[]
}

model Achievement {
  id     Int       @id @default(autoincrement())
  name   String
  levels Int[]
  type   AchievementType
  values Int[]

  userAchievements UserAchievement[]
}

enum Profession {
  NONE
  STUDENT
  OFFICE_WORKER
  REMOTE_WORKER
  HYBRID_WORKER
  STREET_WORKER
}

enum AchievementType {
  STREAK
  CHUBRIKS_GROWN
  CHUBRIK_PHASE_REACHED
  CHUBRIKS_GONE
}

enum HomeArea {
  TINY
  SMALL
  MEDIUM
  LARGE
}

enum Gender {
  MALE
  FEMALE
}

enum TaskType {
  HORIZONTAL_SURFACES_WET_CLEANING
  VERTICAL_SURFACES_WET_CLEANING
  VACUUMING
  LAUNDRY
  DISHWASHING
  FURNITURE
  DAILY
}

enum RoomType {
  KITCHEN
  BATHROOM
  LIVING_ROOM
  BEDROOM
  OFFICE
  EVERYWHERE
  DINING_ROOM
  BASEMENT
  GENERAL
}
